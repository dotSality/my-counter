{"version":3,"sources":["LocalStorageFunctions/storage.ts","redux/store-reducer.ts","redux/selectors.ts","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["restoreState","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","ACTION_TYPES","initState","state","initialState","values","max","start","count","countMessage","error","setError","type","SET_ERROR_AT","payload","setCount","SET_COUNT_AT","setCountMessage","SET_COUNT_MESSAGE_AT","setValues","SET_VALUES_AT","App","dispatch","useDispatch","useSelector","useState","setMax","setStart","useEffect","output","errorClassName","inputErrorClassName","className","onChange","e","value","parseInt","currentTarget","disabled","onClick","newValues","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.4e048cb9.chunk.js","sourcesContent":["export function saveState<T> (key: string, state: T) {\r\n    localStorage.setItem(key, JSON.stringify(state))\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    let state = defaultState\r\n    const stateAsString = localStorage.getItem('values')\r\n    if (stateAsString) {\r\n        state = JSON.parse(stateAsString)\r\n        return state\r\n    } else return null\r\n}","export enum ACTION_TYPES {\r\n    SET_VALUES_AT = 'SET-VALUES-AT',\r\n    SET_ERROR_AT = 'SET-ERROR-AT',\r\n    SET_COUNT_AT = 'SET-COUNT-AT',\r\n    SET_COUNT_MESSAGE_AT = 'SET-COUNT-MESSAGE-AT'\r\n}\r\n\r\nexport type ValuesType = {\r\n    max: number,\r\n    start: number,\r\n}\r\n\r\nconst initialState = {\r\n    values: {\r\n        max: 0,\r\n        start: 0,\r\n    },\r\n    count: 0,\r\n    countMessage: '',\r\n    error: true,\r\n}\r\n\r\ntype InitialStateType = typeof initialState\r\n\r\nexport const stateReducer = (state = initialState, action: CommonActionType): InitialStateType => {\r\n    debugger\r\n    switch (action.type) {\r\n        case ACTION_TYPES.SET_VALUES_AT:\r\n        case ACTION_TYPES.SET_ERROR_AT:\r\n        case ACTION_TYPES.SET_COUNT_AT:\r\n        case ACTION_TYPES.SET_COUNT_MESSAGE_AT:\r\n            return {...state, ...action.payload}\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport type CommonActionType = ReturnType<typeof setError>\r\n    | ReturnType<typeof setCount>\r\n    | ReturnType<typeof setCountMessage>\r\n    | ReturnType<typeof setValues>\r\n\r\nexport const setError = (error: boolean) => ({type: ACTION_TYPES.SET_ERROR_AT, payload: {error}} as const)\r\nexport const setCount = (count: number) => ({type: ACTION_TYPES.SET_COUNT_AT, payload: {count}} as const)\r\nexport const setCountMessage = (countMessage: string) => ({type: ACTION_TYPES.SET_COUNT_MESSAGE_AT, payload: {countMessage}} as const)\r\nexport const setValues = (values: ValuesType) => ({type: ACTION_TYPES.SET_VALUES_AT, payload: {values}} as const)","import {GlobalState} from './store';\r\n\r\nexport const initState = (state: GlobalState) => state.state","import React, {ChangeEvent, useEffect, useState,Dispatch} from 'react';\nimport './App.css';\nimport {restoreState, saveState} from './LocalStorageFunctions/storage';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {initState} from './redux/selectors';\nimport {CommonActionType, setCount, setCountMessage, setError, setValues, ValuesType} from './redux/store-reducer';\n\n// export type ValuesType = {\n//     [key: string]: number\n// }\n\nfunction App() {\n\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\n\n    const {\n        values,\n        count,\n        countMessage,\n        error,\n    } = useSelector(initState)\n\n    const [max, setMax] = useState<number>(values.max)\n    const [start, setStart] = useState<number>(values.start)\n\n    useEffect(() => {\n        let state = restoreState<ValuesType>('values', values)\n        if (state) {\n            dispatch(setError(false))\n            dispatch(setValues(state))\n            setMax(state.max)\n            setStart(state.start)\n            dispatch(setCount(state.start))\n        } else {\n            dispatch(setCountMessage('enter values and press \"set\"'))\n        }\n    }, [])\n\n    const onMaxInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        let value = parseInt(e.currentTarget.value)\n        setMax(value)\n        dispatch(setCountMessage('enter values and press \"set\"'))\n        if (value < 0) {\n            dispatch(setError(true))\n            dispatch(setCountMessage('incorrect values'))\n        } else if (value <= start) {\n            dispatch(setError(true))\n            dispatch(setCountMessage('incorrect values'))\n        } else dispatch(setError(false))\n    }\n\n    const onStartInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        let value = parseInt(e.currentTarget.value)\n        setStart(value)\n        dispatch(setCountMessage('enter values and press \"set\"'))\n        if (value < 0) {\n            dispatch(setError(true))\n            dispatch(setCountMessage('incorrect values'))\n        } else if (value >= max) {\n            dispatch(setError(true))\n            dispatch(setCountMessage('incorrect values'))\n        } else dispatch(setError(false))\n    }\n\n    const setCurrentStorage = () => {\n        let newValues = {max: max, start: start}\n        dispatch(setCount(newValues.start))\n        dispatch(setValues(newValues))\n        saveState<ValuesType>('values', newValues)\n    }\n\n    const setCurrentCount = () => {\n        dispatch(setCount(count + 1))\n    }\n    const resetCurrentCount = () => {\n        let state = restoreState<ValuesType>('values', values)\n        if (state) dispatch(setCount(state.start))\n    }\n\n    const output = restoreState<ValuesType>('values', values) ? (error ? countMessage : count) : countMessage\n    const errorClassName = error ? 'error' : ''\n    const inputErrorClassName = error ? 'error-input' : max === start ? 'error-input' : 'input'\n\n    return (\n        <div className={'head-container'}>\n            <div className={'container'}>\n                <label>Set max: <input className={inputErrorClassName} onChange={onMaxInputChange} value={max} type='number'/></label>\n                <label>Set min: <input className={inputErrorClassName} onChange={onStartInputChange} value={start} type='number'/></label>\n                <div className={'button-container'}>\n                    <button\n                        disabled={error ? true : max === start}\n                        className={'button'}\n                        onClick={setCurrentStorage}>set\n                    </button>\n                </div>\n            </div>\n            <div className={'container'}>\n                <span className={errorClassName}>{output}</span>\n                <span>Current setup: <br/>\n                    max - {values.max}, start - {values.start}</span>\n                <div className={'button-container'}>\n                    <button\n                        disabled={count === values.max ? true : error}\n                        className={'button'}\n                        onClick={setCurrentCount}>count\n                    </button>\n                    <button\n                        disabled={count === values.start ? true : error}\n                        className={'button'}\n                        onClick={resetCurrentCount}>reset\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\r\nimport {stateReducer} from './store-reducer';\r\n\r\n\r\nconst reducers = combineReducers({\r\n    state: stateReducer\r\n})\r\n\r\nexport type GlobalState = ReturnType<typeof reducers>\r\n\r\nexport const store = createStore(reducers)\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}