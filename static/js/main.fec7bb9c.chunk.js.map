{"version":3,"sources":["common/Common.module.css","LocalStorageFunctions/storage.ts","redux/store-reducer.ts","redux/selectors.ts","Components/Settings/Settings.tsx","Components/ButtonsContainer/ButtonsContainer.tsx","Components/CountContainer/CountContainer.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx"],"names":["module","exports","restoreState","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","ACTION_TYPES","initState","state","initialState","values","max","start","count","countMessage","error","setErrorState","type","SET_ERROR_AT","payload","setCount","SET_COUNT_AT","Settings","dispatch","useDispatch","useSelector","inputErrorClassName","s","errorInput","input","className","container","onChange","e","value","parseInt","currentTarget","SET_MAX","setMax","SET_START","setStart","buttonContainer","disabled","button","onClick","newValues","SET_VALUES_AT","setItem","stringify","ButtonsContainer","CountContainer","output","errorClassName","App","useEffect","SET_INITIAL_STATE","setInitialState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","window","getState","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fec7bb9c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Common_container__2tjq8\",\"input\":\"Common_input__tBQNj\",\"buttonContainer\":\"Common_buttonContainer__2RWaY\",\"button\":\"Common_button__ganAj\",\"error\":\"Common_error__1Y-Qr\",\"errorInput\":\"Common_errorInput__1IGlk\"};","export function saveState<T> (key: string, state: T) {\n    localStorage.setItem(key, JSON.stringify(state))\n}\n\nexport function restoreState<T>(key: string, defaultState: T) {\n    let state = defaultState\n    const stateAsString = localStorage.getItem('values')\n    if (stateAsString) {\n        state = JSON.parse(stateAsString)\n        return state\n    } else return null\n}","export enum ACTION_TYPES {\n    SET_VALUES_AT = 'SET-VALUES-AT',\n    SET_ERROR_AT = 'SET-ERROR-AT',\n    SET_COUNT_AT = 'SET-COUNT-AT',\n    SET_MAX = 'SET-MAX',\n    SET_START = 'SET-START',\n    SET_INITIAL_STATE = 'SET-INITIAL-STATE'\n}\n\nexport type ValuesType = {\n    max: number,\n    start: number,\n}\n\nconst initialState = {\n    values: {\n        max: 0,\n        start: 0,\n    },\n    max: 0,\n    start: 0,\n    count: 0,\n    countMessage: '',\n    error: true,\n}\n\ntype InitialStateType = typeof initialState\n\nexport const stateReducer = (state = initialState, action: CommonActionType): InitialStateType => {\n    switch (action.type) {\n        case ACTION_TYPES.SET_VALUES_AT:\n        case ACTION_TYPES.SET_ERROR_AT:\n        case ACTION_TYPES.SET_COUNT_AT:\n        case ACTION_TYPES.SET_MAX:\n        case ACTION_TYPES.SET_START:\n        case ACTION_TYPES.SET_INITIAL_STATE:\n            return {...state, ...action.payload}\n        default:\n            return state;\n    }\n}\n\nexport type CommonActionType = ReturnType<typeof setErrorState>\n    | ReturnType<typeof setCount>\n    | ReturnType<typeof setValues>\n    | ReturnType<typeof setMax>\n    | ReturnType<typeof setStart>\n    | ReturnType<typeof setInitialState>\n\nexport const setErrorState = (error: boolean, countMessage: string) => ({type: ACTION_TYPES.SET_ERROR_AT, payload: {error, countMessage}} as const)\nexport const setCount = (count: number) => ({type: ACTION_TYPES.SET_COUNT_AT, payload: {count}} as const)\nexport const setValues = (values: ValuesType) => ({type: ACTION_TYPES.SET_VALUES_AT, payload: {values}} as const)\nexport const setMax = (max: number) => ({type: ACTION_TYPES.SET_MAX, payload: {max}} as const)\nexport const setStart = (start: number) => ({type: ACTION_TYPES.SET_START, payload: {start}} as const)\nexport const setInitialState = (values: ValuesType, max: number, start: number, count: number) => ({type: ACTION_TYPES.SET_INITIAL_STATE, payload: {values, max, start, count}} as const)","import {GlobalState} from './store';\n\nexport const initState = (state: GlobalState) => state.state","import s from './../../common/Common.module.css'\r\nimport React, {ChangeEvent} from 'react';\r\nimport {CommonActionType, setCount, setErrorState, setMax, setStart, setValues, ValuesType} from '../../redux/store-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {initState} from '../../redux/selectors';\r\nimport {saveState} from '../../LocalStorageFunctions/storage';\r\n\r\nexport const Settings = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n    const {\r\n        max,\r\n        start,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const onMaxInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = parseInt(e.currentTarget.value)\r\n        dispatch(setMax(value))\r\n        if (value < 0 || value <= start) dispatch(setErrorState(true, 'incorrect values'))\r\n        else dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n    }\r\n\r\n    const onStartInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = parseInt(e.currentTarget.value)\r\n        dispatch(setStart(value))\r\n        if (value < 0 || value >= max) dispatch(setErrorState(true, 'incorrect values'))\r\n        else dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n    }\r\n\r\n    const setCurrentStorage = () => {\r\n        let newValues = {max: max, start: start}\r\n        dispatch(setCount(newValues.start))\r\n        dispatch(setValues(newValues))\r\n        saveState<ValuesType>('values', newValues)\r\n    }\r\n\r\n    const inputErrorClassName = error ? s.errorInput : max === start ? s.errorInput : s.input\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <label>Set max: <input className={inputErrorClassName} onChange={onMaxInputChange} value={max} type='number'/></label>\r\n            <label>Set min: <input className={inputErrorClassName} onChange={onStartInputChange} value={start} type='number'/></label>\r\n            <div className={s.buttonContainer}>\r\n                <button\r\n                    disabled={error ? true : max === start}\r\n                    className={s.button}\r\n                    onClick={setCurrentStorage}>set</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from './../../common/Common.module.css'\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonActionType, setCount, ValuesType} from '../../redux/store-reducer';\r\nimport {initState} from '../../redux/selectors';\r\nimport {restoreState} from '../../LocalStorageFunctions/storage';\r\n\r\nexport const ButtonsContainer = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n\r\n    const {\r\n        values,\r\n        count,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const setCurrentCount = () => dispatch(setCount(count + 1))\r\n\r\n    const resetCurrentCount = () => {\r\n        let state = restoreState<ValuesType>('values', values)\r\n        if (state) dispatch(setCount(state.start))\r\n    }\r\n\r\n    return (\r\n        <div className={s.buttonContainer}>\r\n            <button\r\n                disabled={count === values.max ? true : error}\r\n                className={s.button}\r\n                onClick={setCurrentCount}>count\r\n            </button>\r\n            <button\r\n                disabled={count === values.start ? true : error}\r\n                className={s.button}\r\n                onClick={resetCurrentCount}>reset\r\n            </button>\r\n        </div>\r\n    )\r\n}","import s from './../../common/Common.module.css'\r\nimport {ButtonsContainer} from '../ButtonsContainer/ButtonsContainer';\r\nimport React from 'react';\r\nimport {restoreState} from '../../LocalStorageFunctions/storage';\r\nimport {ValuesType} from '../../redux/store-reducer';\r\nimport {useSelector} from 'react-redux';\r\nimport {initState} from '../../redux/selectors';\r\n\r\nexport const CountContainer = () => {\r\n\r\n    const {\r\n        max,\r\n        values,\r\n        count,\r\n        countMessage,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const output = restoreState<ValuesType>('values', values) ? (error ? countMessage : count) : countMessage\r\n    const errorClassName = error ? s.error : count === max ? s.error : ''\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <span className={errorClassName}>{output}</span>\r\n            <span>Current setup: <br/>\r\n                    max - {values.max}, start - {values.start}</span>\r\n            <ButtonsContainer/>\r\n        </div>\r\n    )\r\n}","import React, {useEffect} from 'react';\nimport './App.css';\nimport {restoreState} from './LocalStorageFunctions/storage';\nimport {useDispatch, useSelector} from 'react-redux';\nimport {initState} from './redux/selectors';\nimport {CommonActionType, setErrorState, setInitialState, ValuesType} from './redux/store-reducer';\nimport {Dispatch} from 'redux';\nimport {Settings} from './Components/Settings/Settings';\nimport {CountContainer} from './Components/CountContainer/CountContainer';\n\nfunction App() {\n\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\n\n    const values = useSelector(initState).values\n\n    useEffect(() => {\n        let state = restoreState<ValuesType>('values', values)\n        if (state) {\n            dispatch(setErrorState(false, 'enter values and press \"set\"'))\n            dispatch(setInitialState(state, state.max, state.start, state.start))\n        } else dispatch(setErrorState(true, 'enter values and press \"set\"'))\n    }, [])\n\n    return (\n        <div className={'head-container'}>\n            <Settings/>\n            <CountContainer/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\nimport {stateReducer} from './store-reducer';\n\n\nconst reducers = combineReducers({\n    state: stateReducer\n})\n\nexport type GlobalState = ReturnType<typeof reducers>\n\nexport const store = createStore(reducers)\n\n\n//@ts-ignore\nwindow.store = store.getState()\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App/>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}