{"version":3,"sources":["redux/store-reducer.ts","redux/selectors.ts","LocalStorageFunctions/storage.ts","Components/FirstVersion/FirstSettings/FirstSettings.tsx","Components/FirstVersion/FirstButtons/FirstButtons.tsx","Components/FirstVersion/FirstCount/FirstCount.tsx","Components/FirstVersion/FirstVersion.tsx","Components/SecondVersion/SecondSettings/SecondSettings.tsx","Components/SecondVersion/SecondButtons/SecondButtons.tsx","Components/SecondVersion/SecondCount/SecondCount.tsx","Components/SecondVersion/SecondVersion.tsx","Components/Navigation/Navigation.tsx","App.tsx","reportWebVitals.ts","redux/store.ts","index.tsx","Components/SecondVersion/Second.module.css","Components/FirstVersion/First.module.css","common/Common.module.css"],"names":["ACTION_TYPES","initialState","values","max","start","count","countMessage","error","setErrorState","type","SET_ERROR_AT","payload","setCount","SET_COUNT_AT","setValues","SET_VALUES_AT","setMax","SET_MAX","setStart","SET_START","setInitialState","SET_INITIAL_STATE","initState","state","saveState","key","localStorage","setItem","JSON","stringify","restoreState","defaultState","stateAsString","getItem","parse","FirstSettings","dispatch","useDispatch","useSelector","inputErrorClassName","s","errorInput","input","className","container","onChange","e","value","parseInt","currentTarget","buttonContainer","disabled","button","onClick","newValues","FirstButtons","FirstCount","output","errorClassName","FirstVersion","useEffect","firstWindow","SecondSettings","SecondButtons","props","toggleSettings","settings","SecondCount","SecondVersion","useState","setSettings","secondWindow","Navigation","nav","isActive","c","link","active","to","App","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","action","store","createStore","window","getState","ReactDOM","render","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3ce64fd5.chunk.js","sourcesContent":["export enum ACTION_TYPES {\n    SET_VALUES_AT = 'SET-VALUES-AT',\n    SET_ERROR_AT = 'SET-ERROR-AT',\n    SET_COUNT_AT = 'SET-COUNT-AT',\n    SET_MAX = 'SET-MAX',\n    SET_START = 'SET-START',\n    SET_INITIAL_STATE = 'SET-INITIAL-STATE'\n}\n\nexport type ValuesType = {\n    max: number,\n    start: number,\n}\n\nconst initialState = {\n    values: {\n        max: 0,\n        start: 0,\n    },\n    max: 0,\n    start: 0,\n    count: 0,\n    countMessage: '',\n    error: true,\n}\n\ntype InitialStateType = typeof initialState\n\nexport const stateReducer = (state = initialState, action: CommonActionType): InitialStateType => {\n    switch (action.type) {\n        case ACTION_TYPES.SET_VALUES_AT:\n        case ACTION_TYPES.SET_ERROR_AT:\n        case ACTION_TYPES.SET_COUNT_AT:\n        case ACTION_TYPES.SET_MAX:\n        case ACTION_TYPES.SET_START:\n        case ACTION_TYPES.SET_INITIAL_STATE:\n            return {...state, ...action.payload}\n        default:\n            return state;\n    }\n}\n\nexport type CommonActionType = ReturnType<typeof setErrorState>\n    | ReturnType<typeof setCount>\n    | ReturnType<typeof setValues>\n    | ReturnType<typeof setMax>\n    | ReturnType<typeof setStart>\n    | ReturnType<typeof setInitialState>\n\nexport const setErrorState = (error: boolean, countMessage: string) => ({type: ACTION_TYPES.SET_ERROR_AT, payload: {error, countMessage}} as const)\nexport const setCount = (count: number) => ({type: ACTION_TYPES.SET_COUNT_AT, payload: {count}} as const)\nexport const setValues = (values: ValuesType) => ({type: ACTION_TYPES.SET_VALUES_AT, payload: {values}} as const)\nexport const setMax = (max: number) => ({type: ACTION_TYPES.SET_MAX, payload: {max}} as const)\nexport const setStart = (start: number) => ({type: ACTION_TYPES.SET_START, payload: {start}} as const)\nexport const setInitialState = (values: ValuesType, max: number, start: number, count: number) => ({type: ACTION_TYPES.SET_INITIAL_STATE, payload: {values, max, start, count}} as const)","import {GlobalState} from './store';\n\nexport const initState = (state: GlobalState) => state.state","export function saveState<T> (key: string, state: T) {\n    localStorage.setItem(key, JSON.stringify(state))\n}\n\nexport function restoreState<T>(key: string, defaultState: T) {\n    let state = defaultState\n    const stateAsString = localStorage.getItem(key)\n    if (stateAsString) {\n        state = JSON.parse(stateAsString)\n        return state\n    } else return null\n}","import s from '../First.module.css'\r\nimport React, {ChangeEvent} from 'react';\r\nimport {CommonActionType, setCount, setErrorState, setMax, setStart, setValues, ValuesType} from '../../../redux/store-reducer';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {initState} from '../../../redux/selectors';\r\nimport {saveState} from '../../../LocalStorageFunctions/storage';\r\n\r\nexport const FirstSettings = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n    const {\r\n        max,\r\n        start,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const onMaxInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = parseInt(e.currentTarget.value)\r\n        dispatch(setMax(value))\r\n        if (value < 0 || value <= start) dispatch(setErrorState(true, 'incorrect values'))\r\n        else dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n    }\r\n\r\n    const onStartInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = parseInt(e.currentTarget.value)\r\n        dispatch(setStart(value))\r\n        if (value < 0 || value >= max) dispatch(setErrorState(true, 'incorrect values'))\r\n        else dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n    }\r\n\r\n    const setCurrentStorage = () => {\r\n        let newValues = {max: max, start: start}\r\n        dispatch(setCount(newValues.start))\r\n        dispatch(setValues(newValues))\r\n        saveState<ValuesType>('first-values', newValues)\r\n    }\r\n\r\n    const inputErrorClassName = error ? s.errorInput : max === start ? s.errorInput : s.input\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <label>Set max: <input className={inputErrorClassName} onChange={onMaxInputChange} value={max} type='number'/></label>\r\n            <label>Set min: <input className={inputErrorClassName} onChange={onStartInputChange} value={start} type='number'/></label>\r\n            <div className={s.buttonContainer}>\r\n                <button\r\n                    disabled={error ? true : max === start}\r\n                    className={s.button}\r\n                    onClick={setCurrentStorage}>Set</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import s from '../First.module.css'\r\nimport React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonActionType, setCount, ValuesType} from '../../../redux/store-reducer';\r\nimport {initState} from '../../../redux/selectors';\r\nimport {restoreState} from '../../../LocalStorageFunctions/storage';\r\n\r\nexport const FirstButtons = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n\r\n    const {\r\n        values,\r\n        count,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const setCurrentCount = () => dispatch(setCount(count + 1))\r\n\r\n    const resetCurrentCount = () => {\r\n        let state = restoreState<ValuesType>('first-values', values)\r\n        if (state) dispatch(setCount(state.start))\r\n    }\r\n\r\n    return (\r\n        <div className={s.buttonContainer}>\r\n            <button\r\n                disabled={count === values.max ? true : error}\r\n                className={s.button}\r\n                onClick={setCurrentCount}>Count\r\n            </button>\r\n            <button\r\n                disabled={count === values.start ? true : error}\r\n                className={s.button}\r\n                onClick={resetCurrentCount}>Reset\r\n            </button>\r\n        </div>\r\n    )\r\n}","import s from '../First.module.css'\r\nimport {FirstButtons} from '../FirstButtons/FirstButtons';\r\nimport React from 'react';\r\nimport {restoreState} from '../../../LocalStorageFunctions/storage';\r\nimport {ValuesType} from '../../../redux/store-reducer';\r\nimport {useSelector} from 'react-redux';\r\nimport {initState} from '../../../redux/selectors';\r\n\r\nexport const FirstCount = () => {\r\n\r\n    const {\r\n        max,\r\n        values,\r\n        count,\r\n        countMessage,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const output = restoreState<ValuesType>('values', values) ? (error ? countMessage : count) : countMessage\r\n    const errorClassName = error ? s.error : count === max ? s.error : ''\r\n\r\n    return (\r\n        <div className={s.container}>\r\n            <span className={errorClassName}>{output}</span>\r\n            <span>Current setup: <br/>\r\n                    max - {values.max}, start - {values.start}</span>\r\n            <FirstButtons/>\r\n        </div>\r\n    )\r\n}","import {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonActionType, setErrorState, setInitialState, ValuesType} from '../../redux/store-reducer';\r\nimport s from './First.module.css'\r\nimport {initState} from '../../redux/selectors';\r\nimport React, {useEffect} from 'react';\r\nimport {restoreState} from '../../LocalStorageFunctions/storage';\r\nimport {FirstSettings} from './FirstSettings/FirstSettings';\r\nimport {FirstCount} from './FirstCount/FirstCount';\r\n\r\nexport const FirstVersion = () => {\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n\r\n    const values = useSelector(initState).values\r\n\r\n    useEffect(() => {\r\n        let state = restoreState<ValuesType>('first-values', values)\r\n        if (state) {\r\n            dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n            dispatch(setInitialState(state, state.max, state.start, state.start))\r\n        } else dispatch(setErrorState(true, 'enter values and press \"set\"'))\r\n    }, [])\r\n\r\n    return (\r\n        <div className={s.firstWindow}>\r\n            <FirstSettings/>\r\n            <FirstCount/>\r\n        </div>\r\n    );\r\n}\r\n","import {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonActionType, setCount, setErrorState, setMax, setStart, setValues, ValuesType} from '../../../redux/store-reducer';\r\nimport {initState} from '../../../redux/selectors';\r\nimport React, {ChangeEvent} from 'react';\r\nimport {saveState} from '../../../LocalStorageFunctions/storage';\r\nimport s from './../Second.module.css';\r\n\r\nexport const SecondSettings = () => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n    const {\r\n        max,\r\n        start,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const onMaxInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = parseInt(e.currentTarget.value)\r\n        dispatch(setMax(value))\r\n        if (value < 0 || value <= start) dispatch(setErrorState(true, 'incorrect values'))\r\n        else dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n    }\r\n\r\n    const onStartInputChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        let value = parseInt(e.currentTarget.value)\r\n        dispatch(setStart(value))\r\n        if (value < 0 || value >= max) dispatch(setErrorState(true, 'incorrect values'))\r\n        else dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n    }\r\n\r\n    const setCurrentStorage = () => {\r\n        let newValues = {max: max, start: start}\r\n        dispatch(setCount(newValues.start))\r\n        dispatch(setValues(newValues))\r\n        saveState<ValuesType>('second-values', newValues)\r\n    }\r\n\r\n    const inputErrorClassName = error ? s.errorInput : max === start ? s.errorInput : s.input\r\n\r\n    return (\r\n        <div className={s.count}>\r\n            <label>Set max: <input className={inputErrorClassName} onChange={onMaxInputChange} value={max} type='number'/></label>\r\n            <label>Set min: <input className={inputErrorClassName} onChange={onStartInputChange} value={start} type='number'/></label>\r\n                <button\r\n                    disabled={error ? true : max === start}\r\n                    className={s.button}\r\n                    onClick={setCurrentStorage}>Set</button>\r\n        </div>\r\n    )\r\n}","import s from './../Second.module.css'\r\nimport {CommonActionType, setCount, ValuesType} from '../../../redux/store-reducer';\r\nimport {restoreState} from '../../../LocalStorageFunctions/storage';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {initState} from '../../../redux/selectors';\r\nimport React from 'react';\r\n\r\ntype ButtonContainerPropsType = {\r\n    settings: boolean\r\n    toggleSettings: () => void\r\n}\r\n\r\nexport const SecondButtons = (props: ButtonContainerPropsType) => {\r\n\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n\r\n    const {\r\n        values,\r\n        count,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const setCurrentCount = () => dispatch(setCount(count + 1))\r\n\r\n    const resetCurrentCount = () => {\r\n        let state = restoreState<ValuesType>('first-values', values)\r\n        if (state) dispatch(setCount(state.start))\r\n    }\r\n\r\n    return (\r\n        <div className={s.buttonContainer}>\r\n            <button\r\n                disabled={count === values.max ? true : error}\r\n                className={s.button}\r\n                onClick={setCurrentCount}>Count\r\n            </button>\r\n            <button\r\n                disabled={count === values.start ? true : error}\r\n                className={s.button}\r\n                onClick={resetCurrentCount}>Reset\r\n            </button>\r\n            <button\r\n                className={s.button}\r\n                onClick={props.toggleSettings}>\r\n                {props.settings ? 'Count' : 'Settings'}</button>\r\n        </div>\r\n    )\r\n}","import {useSelector} from 'react-redux';\r\nimport {initState} from '../../../redux/selectors';\r\nimport {restoreState} from '../../../LocalStorageFunctions/storage';\r\nimport {ValuesType} from '../../../redux/store-reducer';\r\nimport s from './../Second.module.css';\r\nimport React from 'react';\r\n\r\nexport const SecondCount = () => {\r\n\r\n    const {\r\n        max,\r\n        values,\r\n        count,\r\n        countMessage,\r\n        error,\r\n    } = useSelector(initState)\r\n\r\n    const output = restoreState<ValuesType>('second-values', values) ? (error ? countMessage : count) : countMessage\r\n    const errorClassName = error ? s.error : count === max ? s.error : ''\r\n\r\n    return (\r\n        <div className={s.count}>\r\n            <span className={errorClassName}>{output}</span>\r\n            <span>Current setup: <br/>\r\n                    max - {values.max}, start - {values.start}</span>\r\n        </div>\r\n    )\r\n}","import {useDispatch, useSelector} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\nimport {CommonActionType, setErrorState, setInitialState, ValuesType} from '../../redux/store-reducer';\r\nimport {initState} from '../../redux/selectors';\r\nimport React, {useEffect, useState} from 'react';\r\nimport {restoreState} from '../../LocalStorageFunctions/storage';\r\nimport {SecondSettings} from './SecondSettings/SecondSettings';\r\nimport {SecondButtons} from './SecondButtons/SecondButtons';\r\nimport s from './Second.module.css';\r\nimport {Route, Routes} from 'react-router-dom';\r\nimport {SecondCount} from './SecondCount/SecondCount';\r\n\r\nexport const SecondVersion = () => {\r\n\r\n    const [settings, setSettings] = useState<boolean>(false)\r\n    const toggleSettings = () => setSettings(!settings)\r\n\r\n    const dispatch = useDispatch<Dispatch<CommonActionType>>()\r\n\r\n    const values = useSelector(initState).values\r\n\r\n    useEffect(() => {\r\n        let state = restoreState<ValuesType>('second-values', values)\r\n        if (state) {\r\n            dispatch(setErrorState(false, 'enter values and press \"set\"'))\r\n            dispatch(setInitialState(state, state.max, state.start, state.start))\r\n        } else dispatch(setErrorState(true, 'enter values and press \"set\"'))\r\n    }, [])\r\n\r\n    return (\r\n        <div className={s.secondWindow}>\r\n            <div className={s.container}>\r\n                {/*            <Routes>\r\n                <Route path={'/second-ver/settings/'} element={<FirstSettings/>}/>\r\n                <Route path={'/second-ver/count/'} element={<FirstCount/>}/>\r\n            </Routes>*/}\r\n                {settings ? <SecondSettings/> : <SecondCount/>}\r\n                <SecondButtons settings={settings} toggleSettings={toggleSettings}/>\r\n                {/*<FirstCount/>*/}\r\n                {/*<HeadWindow/>*/}\r\n            </div>\r\n        </div>\r\n    );\r\n}","import { NavLink } from \"react-router-dom\"\r\nimport s from './../../common/Common.module.css'\r\nimport c from './../../common/Common.module.css'\r\n\r\nexport const Navigation = () => {\r\n    return (\r\n        <div className={s.nav}>\r\n            <NavLink className={({isActive}) => isActive ? `${c.link} ${c.active}` : c.link} to={'/first-ver/'}>\r\n                First\r\n            </NavLink>\r\n            <NavLink className={({isActive}) => isActive ? `${c.link} ${c.active}` : c.link} to={'/second-ver/'}>\r\n                Second\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport {Route, Routes} from 'react-router-dom';\nimport './App.css';\nimport {FirstVersion} from './Components/FirstVersion/FirstVersion';\nimport { SecondVersion } from './Components/SecondVersion/SecondVersion';\nimport { Navigation } from './Components/Navigation/Navigation';\n\nfunction App() {\n\n    return (\n        <div className={'head-container'}>\n            <Navigation/>\n            <Routes>\n                <Route path={'/first-ver/'} element={<FirstVersion/>}/>\n                <Route path={'/second-ver/'} element={<SecondVersion/>}/>\n            </Routes>\n        </div>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {combineReducers, createStore} from 'redux';\nimport {stateReducer} from './store-reducer';\n\n\nconst reducers = combineReducers({\n    state: stateReducer\n})\n\nexport type GlobalState = ReturnType<typeof reducers>\n\nexport const store = createStore(reducers)\n\n\n//@ts-ignore\nwindow.store = store.getState()\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"secondWindow\":\"Second_secondWindow__3CpOa\",\"container\":\"Second_container__3Pb0I\",\"count\":\"Second_count__3AVJq\",\"input\":\"Second_input__381Tb\",\"buttonContainer\":\"Second_buttonContainer__3o9i-\",\"button\":\"Second_button__2eZzJ\",\"error\":\"Second_error__2B-IT\",\"errorInput\":\"Second_errorInput__3Q4Jo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"firstWindow\":\"First_firstWindow__3_pSv\",\"container\":\"First_container__4mtAK\",\"input\":\"First_input__2pqFi\",\"buttonContainer\":\"First_buttonContainer__3mU4w\",\"button\":\"First_button__1QMrg\",\"error\":\"First_error__ArJWX\",\"errorInput\":\"First_errorInput__FFmqf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Common_nav__3CBRD\",\"link\":\"Common_link__2A8bu\",\"active\":\"Common_active__13SJc\"};"],"sourceRoot":""}