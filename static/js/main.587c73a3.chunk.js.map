{"version":3,"sources":["LocalStorageFunctions/storage.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["restoreState","key","defaultState","stateAsString","localStorage","getItem","JSON","parse","App","useState","max","start","values","setValues","count","setCount","countMsg","setCountMsg","error","setError","setMax","setStart","useEffect","state","output","errorClassName","className","onChange","e","value","parseInt","currentTarget","type","disabled","onClick","newValues","setItem","stringify","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gOAIO,SAASA,EAAgBC,EAAaC,GACzC,IACMC,EAAgBC,aAAaC,QAAQ,UAC3C,OAAIF,EACQG,KAAKC,MAAMJ,GAET,K,WCqGHK,MAvGf,WACI,IADW,EAMiBC,mBALK,CAC7BC,IAAK,EACLC,MAAO,IAHA,mBAMJC,EANI,KAMIC,EANJ,OAOeJ,mBAAiB,GAPhC,mBAOJK,EAPI,KAOGC,EAPH,OAQqBN,mBAAiB,IARtC,mBAQJO,EARI,KAQMC,EARN,OASeR,oBAAkB,GATjC,mBASJS,EATI,KASGC,EATH,OAUWV,mBAAiB,GAV5B,mBAUJC,EAVI,KAUCU,EAVD,OAWeX,mBAAiB,GAXhC,mBAWJE,EAXI,KAWGU,EAXH,KAaXC,qBAAU,WACN,IAAIC,EAAQvB,IACRuB,GACAJ,GAAS,GACTN,EAAUU,GACVH,EAAOG,EAAMb,KACbW,EAASE,EAAMZ,OACfI,EAASQ,EAAMZ,SAEfQ,GAAS,GACTF,EAAY,mCAEjB,IAEH,IAyCMO,EAASxB,IAA8CkB,EAAQF,EAAWF,EAASE,EAEnFS,EAAiBP,EAAQ,QAAU,GACzC,OACI,sBAAKQ,UAAW,iBAAhB,UACI,sBAAKA,UAAW,YAAhB,UACI,8CAAgB,uBAAOA,UAAWD,EAAgBE,SA/CrC,SAACC,GACtB5B,IAA6CmB,GAAS,GAASA,GAAS,GACxE,IAAIU,EAAQC,SAASF,EAAEG,cAAcF,OACrCT,EAAOS,GACPZ,EAAY,gCACRY,EAAQ,GAGDA,GAASlB,GAFhBQ,GAAS,GACTF,EAAY,oBAITE,GAAS,IAoCsEU,MAAOnB,EAAKsB,KAAK,cAC/F,8CAAgB,uBAAON,UAAWD,EAAgBE,SAlCnC,SAACC,GACxB5B,IAA8CmB,GAAS,GAAQA,GAAS,GACxE,IAAIU,EAAQC,SAASF,EAAEG,cAAcF,OACrCR,EAASQ,GACTZ,EAAY,gCACRY,EAAQ,GAGDA,GAASnB,GAFhBS,GAAS,GACTF,EAAY,oBAITE,GAAS,IAuBwEU,MAAOlB,EAAOqB,KAAK,cACnG,qBAAKN,UAAW,mBAAhB,SACI,wBACIO,SAAUf,EACVQ,UAAW,SACXQ,QAzBM,WACtB,IDhEsBjC,EAAasB,ECgE/BY,EAAS,2BAAOvB,GAAP,IAAeF,IAAKA,EAAKC,MAAOA,IAC7CE,EAAUsB,GACVpB,EAASoB,EAAUxB,ODlEGV,ECmEA,SDnEasB,ECmEHY,EDlEpC/B,aAAagC,QAAQnC,EAAKK,KAAK+B,UAAUd,KCoFzB,sBAOR,sBAAKG,UAAW,YAAhB,UACI,sBAAMA,UAAWD,EAAjB,SAAkCD,IAClC,sBAAKE,UAAW,mBAAhB,UACI,wBACIO,SAAUnB,IAAUF,EAAOF,KAAaQ,EACxCQ,UAAW,SACXQ,QA5BI,kBAAMnB,EAASD,EAAQ,IAyB/B,mBAKA,wBACImB,SAAUnB,IAAUF,EAAOD,OAAeO,EAC1CQ,UAAW,SACXQ,QAhCM,WACtB,IAAIX,EAAQvB,IACRuB,GAAOR,EAASQ,EAAMZ,QA2Bd,6BCtFL2B,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SAM5Bb,M","file":"static/js/main.587c73a3.chunk.js","sourcesContent":["export function saveState<T> (key: string, state: T) {\r\n    localStorage.setItem(key, JSON.stringify(state))\r\n}\r\n\r\nexport function restoreState<T>(key: string, defaultState: T) {\r\n    let state = defaultState\r\n    const stateAsString = localStorage.getItem('values')\r\n    if (stateAsString) {\r\n        state = JSON.parse(stateAsString)\r\n        return state\r\n    } else return null\r\n}","import React, {ChangeEvent, useEffect, useState} from 'react';\nimport './App.css';\nimport {restoreState, saveState} from './LocalStorageFunctions/storage';\n\nexport type ValuesType = {\n    [key: string]: number\n}\n\nfunction App() {\n    const initialState: ValuesType = {\n        max: 0,\n        start: 0\n    }\n\n    const [values, setValues] = useState<ValuesType>(initialState)\n    const [count, setCount] = useState<number>(0)\n    const [countMsg, setCountMsg] = useState<string>('')\n    const [error, setError] = useState<boolean>(false)\n    const [max, setMax] = useState<number>(0)\n    const [start, setStart] = useState<number>(0)\n\n    useEffect(() => {\n        let state = restoreState<ValuesType>('values', values)\n        if (state) {\n            setError(false)\n            setValues(state)\n            setMax(state.max)\n            setStart(state.start)\n            setCount(state.start)\n        } else {\n            setError(true)\n            setCountMsg('enter values and press \"set\"')\n        }\n    }, [])\n\n    const onMaxInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        restoreState<ValuesType>('values', values) ? setError(false) : setError(true)\n        let value = parseInt(e.currentTarget.value)\n        setMax(value)\n        setCountMsg('enter values and press \"set\"')\n        if (value < 0) {\n            setError(true)\n            setCountMsg('value incorrect')\n        } else if (value <= start) {\n            setError(true)\n            setCountMsg('value incorrect')\n        } else setError(false)\n    }\n\n    const onStartInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n        restoreState<ValuesType>('values', values) ?  setError(true) : setError(false)\n        let value = parseInt(e.currentTarget.value)\n        setStart(value)\n        setCountMsg('enter values and press \"set\"')\n        if (value < 0) {\n            setError(true)\n            setCountMsg('value incorrect')\n        } else if (value >= max) {\n            setError(true)\n            setCountMsg('value incorrect')\n        } else setError(false)\n    }\n\n    const setCurrentStorage = () => {\n        let newValues = {...values, max: max, start: start}\n        setValues(newValues)\n        setCount(newValues.start)\n        saveState<ValuesType>('values', newValues)\n    }\n\n    const setCurrentCount = () => setCount(count + 1)\n    const resetCurrentCount = () => {\n        let state = restoreState<ValuesType>('values', values)\n        if (state) setCount(state.start)\n    }\n\n    const output = restoreState<ValuesType>('values', values) ? (error ? countMsg : count) : countMsg\n\n    const errorClassName = error ? 'error' : ''\n    return (\n        <div className={'head-container'}>\n            <div className={'container'}>\n                <label>Set max: <input className={errorClassName} onChange={onMaxInputChange} value={max} type='number'/></label>\n                <label>Set min: <input className={errorClassName} onChange={onStartInputChange} value={start} type='number'/></label>\n                <div className={'button-container'}>\n                    <button\n                        disabled={error}\n                        className={'button'}\n                        onClick={setCurrentStorage}>set\n                    </button>\n                </div>\n            </div>\n            <div className={'container'}>\n                <span className={errorClassName}>{output}</span>\n                <div className={'button-container'}>\n                    <button\n                        disabled={count === values.max ? true : error}\n                        className={'button'}\n                        onClick={setCurrentCount}>count\n                    </button>\n                    <button\n                        disabled={count === values.start ? true : error}\n                        className={'button'}\n                        onClick={resetCurrentCount}>reset\n                    </button>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}